" vim: set sw=2 ts=2 sts=2 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker:
scriptencoding utf-8

let g:mapleader = ','

" verbose nnoremap <leader>j

" Mappings {
    " Ack {
        nnoremap <leader>s :Ack<space>
    " }

    " Ale {
        nmap <C-k> <Plug>(ale_previous_wrap)
        nmap <C-j> <Plug>(ale_next_wrap)
    " }

    " Easemotion {
        "nmap F :HopWord<CR>
        "nmap f :HopChar1<CR>
        "nmap F :HopChar2<CR>
        nmap f :HopChar2<CR>
        "nmap F :HopPattern<CR>
        "nmap F :HopAnywhere<CR>
        "nmap F :HopLine<CR>
        "nmap F :HopLineStart<CR>
        "nmap <leader><leader>f <Plug>(easymotion-s)
        "nmap <leader><leader>s <Plug>(easymotion-s)
        "nmap <leader><leader>j <Plug>(easymotion-j)
        "nmap <leader><leader>k <Plug>(easymotion-k)
        "nmap <leader><leader>l <Plug>(easymotion-lineforward)
        "nmap <leader><leader>h <Plug>(easymotion-linebackward)
    " }

    " Easy align{
        xmap ga <Plug>(EasyAlign)
        nmap ga <Plug>(EasyAlign)
    " }

    " FZF {
        nmap <silent> <C-p> :Files ~/Code<CR>
        nmap <silent> <C-e> :Buffers<CR>
    " }

    " JsDoc {
        nmap <leader>d <Plug>(jsdoc)
    " }

    " nvim-tree {
        "map <silent> <leader>e :NvimTreeFindFile!<CR>
        "map <silent> <leader>n :NvimTreeToggle<CR>
    " }

    " NerdTree {
        map <silent> <leader>e :NERDTreeFind<CR>
        map <silent> <leader>n :NERDTreeToggle<CR>
        map <silent> <leader>c :NERDTree ~/Code<CR>
        map <silent> <leader>v :NERDTree ~/.vim<CR>
        map <silent> <leader>p :NERDTree ~/.myprofile<CR>
    " }

    " Signify {
        nmap <leader>N <plug>(signify-next-hunk)
        nmap <leader>P <plug>(signify-prev-hunk)
    " }

    " Tagbar {
        nmap <silent> <leader>t :TagbarToggle<CR>
    " }

    " TPL {
        nmap <silent> <leader><leader>t :call SetTpl()<CR>
    " }

    " React Comment{
        nmap <silent> <leader><leader>c :call AddComment()<CR>
    " }

    " Eslint Disable{
        nmap <silent> <leader><leader>e :call AddEsLintDisable()<CR>
    " }

    " add console {
        nmap <silent> <leader><leader>l :call AddConsole()<CR>
    " }

    " Undotree {
        nnoremap <silent> <leader>u :UndotreeToggle<CR>
    " }

    " LeaderF {
        " let g:Lf_ShortcutF = '<leader>f'
    " }

    " Telescope {
        nnoremap <leader>ff <cmd>Telescope find_files<cr>
        nnoremap <leader>fg <cmd>Telescope live_grep<cr>
        nnoremap <leader>fb <cmd>Telescope buffers<cr>
        nnoremap <leader>fh <cmd>Telescope help_tags<cr>
        nnoremap <leader>fs <cmd>Telescope git_status<cr>
        nnoremap <leader>g <cmd>Telescope git_status<cr>
        "}

    " Blamer{
        "nnoremap <silent> <leader>a :BlamerToggle<CR>
    " }

    " Self {
        nnoremap <silent> <leader><leader>r :vertical-resize<space>
        nnoremap <silent> <leader><leader>o :browse oldfiles<CR>
        nnoremap <silent> <leader><CR> :noh<CR>
        nnoremap <silent> <leader>T :tabs<CR>
        nnoremap <silent> <leader>r :reg<CR>
        nnoremap <silent> <leader><leader>q :q!<CR>
        nnoremap <silent> <leader>w :w<CR>
        nnoremap <silent> <leader>q :q<CR>
        nnoremap <silent> <leader>x :x<CR>
        nnoremap <leader>h <c-w>h
        nnoremap <leader>j <c-w>j
        nnoremap <leader>k <c-w>k
        nnoremap <leader>l <c-w>l
        inoremap jj <Esc>
        nnoremap j gj
        nnoremap k gk
        nnoremap 0 ^
    " }
" }
