" vim: set sw=2 ts=2 sts=2 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker:
scriptencoding utf-8

" Plugins Beginning {
    let g:Plug_dir = '~/.vim/plugged/'

    filetype off

    call plug#begin(g:Plug_dir)

    " Plugins list {
    Plug 'mbbill/undotree'
    Plug 'mattn/emmet-vim'
    Plug 'tpope/vim-repeat'
    Plug 'SirVer/ultisnips'
    Plug 'preservim/tagbar'                     " browse the tags of the current file and get an overview
    Plug 'honza/vim-snippets'
    Plug 'mhinz/vim-startify'
    Plug 'roman/golden-ratio'                   " automatic resizing
    Plug 'tpope/vim-sensible'
    Plug 'tpope/vim-surround'                   " mappings to easily delete, change and add such surroundings in pairs
    Plug 'luochen1990/rainbow'
    "Plug 'Yggdroot/indentLine'                 " display the indention levels
    Plug 'lukas-reineke/indent-blankline.nvim'  " display the indention levels
    Plug 'APZelos/blamer.nvim'
    Plug 'sheerun/vim-polyglot'                 " highlight
    "Plug 'jiangmiao/auto-pairs'                 " insert or delete brackets, parens, quotes in pair
    Plug 'windwp/nvim-autopairs'
    "Plug 'Raimondi/delimitMate'
    Plug 'kshenoy/vim-signature'                " display and navigate marks
    Plug 'junegunn/vim-easy-align'
    Plug 'godlygeek/tabular'
    "Plug 'easymotion/vim-easymotion'           " motions
    Plug 'phaazon/hop.nvim'                     " motions
    Plug 'terryma/vim-multiple-cursors'         " multiple selections
    Plug 'editorconfig/editorconfig-vim'

    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    " Golang
    Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

    " File
    Plug 'preservim/nerdtree'           " explorer
    Plug 'voldikss/vim-floaterm'        " terminal manager
    Plug 'scrooloose/nerdcommenter'     " commenter
    Plug 'tpope/vim-commentary'
    Plug 'Xuyuanp/nerdtree-git-plugin'  " show git status flags
    Plug 'ryanoasis/vim-devicons'

    " Search
    Plug 'mileszs/ack.vim'
    Plug 'junegunn/fzf.vim'
    Plug 'pechorin/any-jump.vim'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.1' }
    Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
    Plug 'kevinhwang91/nvim-bqf'

    " Syntax and Fix
    Plug 'dense-analysis/ale'

    " Complete
    "Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'ycm-core/YouCompleteMe'
    Plug 'junegunn/vim-emoji'

    " Rust
    Plug 'racer-rust/vim-racer'
    Plug 'rust-lang/rust.vim'

    " Doc
    Plug 'heavenshell/vim-jsdoc', {
          \ 'for': ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx', 'vue'],
          \ 'do': 'make install' }

    " UI
    Plug 'rcarriga/nvim-notify'
    Plug 'akinsho/bufferline.nvim', { 'tag': '*' }
    "Plug 'ap/vim-css-color'
    Plug 'norcalli/nvim-colorizer.lua'
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " highlight

    " colorscheme
    Plug 'folke/tokyonight.nvim'
    Plug 'catppuccin/nvim', { 'as': 'catppuccin' }
    Plug 'rebelot/kanagawa.nvim'
    Plug 'EdenEast/nightfox.nvim'

    " git
    "Plug 'mhinz/vim-signify'        " show a diff
    Plug 'lewis6991/gitsigns.nvim'   " show a diff
    Plug 'tpope/vim-fugitive'

    " diff
    Plug 'sindrets/diffview.nvim'

    " deps
    Plug 'nvim-tree/nvim-web-devicons'
    Plug 'nvim-lua/plenary.nvim'

    Plug 'lervag/vimtex'

    Plug 'wellle/targets.vim'

    Plug 'preservim/vim-markdown'

    Plug 'williamboman/mason.nvim'
    Plug 'L3MON4D3/LuaSnip'

    Plug 'onsails/lspkind.nvim'
    Plug 'hrsh7th/nvim-cmp'
    Plug 'neovim/nvim-lspconfig'
    Plug 'j-hui/fidget.nvim'

    " Plugins list End }

    call plug#end()
" Plugins End }

" Plugin Config Start {
    " AutoJump{
        let g:any_jump_disable_default_keybindings = 1
    " }

    " Emoji{
        set completefunc=emoji#complete
    " }

    " Signify {
        let g:signify_vcs_list = [ 'git' ]

        highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119
        highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167
        highlight DiffChange        cterm=bold ctermbg=none ctermfg=227
        highlight SignifySignAdd    cterm=bold ctermbg=237  ctermfg=119
        highlight SignifySignDelete cterm=bold ctermbg=237  ctermfg=167
        highlight SignifySignChange cterm=bold ctermbg=237  ctermfg=227
    " }

    " Easemotion {
        "let g:EasyMotion_smartcase = 1
    " }

    " Emmet {
        let g:user_emmet_expandabbr_key='<leader><tab>'
    " }

    " NerdTree {
        let g:NERDTreeWinSize=40
        let g:NERDTreeChDirMode=1
        let g:NERDTreeMouseMode=2
        let g:NERDTreeQuitOnOpen=1
        let g:NERDTreeShowHidden=1
        let g:NERDTreeShowBookmarks=1
        let g:NERDTreeKeepTreeInNewTab=1
        let g:NERDTreeDirArrowExpandable = '+'
        let g:NERDTreeDirArrowCollapsible = '-'

        let g:NERDTreeIgnore=[
                    \ '\.py[cd]$', '\~$', '\.swo$',
                    \ '\.swp$', '^\.git$', '^\.hg$',
                    \ '^\.svn$', '\.bzr$', '^\.DS_Store',
                    \ 'node_modules', '\.meta$', '\.fire$']

        let g:NERDTreeGitStatusIndicatorMapCustom = {
            \ 'Modified'  : '*',
            \ 'Staged'    : '+',
            \ 'Untracked' : '✭',
            \ 'Renamed'   : '➜',
            \ 'Unmerged'  : '═',
            \ 'Deleted'   : 'x',
            \ 'Dirty'     : '✗',
            \ 'Clean'     : '✔︎',
            \ 'Ignored'   : '☒',
            \ 'Unknown'   : '?' }
    " }

    " FZF {
        let g:fzf_action = {
                    \ 'ctrl-e': 'edit',
                    \ 'ctrl-t': 'tab split',
                    \ 'ctrl-x': 'split',
                    \ 'ctrl-v': 'vsplit' }
    " }

    " Ultisnips {
        let g:UltiSnipsExpandTrigger='<tab>'
        let g:UltiSnipsJumpBackwardTrigger='<c-j>'
        let g:UltiSnipsJumpForwardTrigger='<c-k>'
        let g:UltiSnipsEditSplit='vertical'
    " }

    " IndentLine {
        "let g:indentLine_concealcursor='inc'
        "let g:indentLine_conceallevel=2
    " }

    " Ale {
        let g:ale_fix_on_save=1
        let g:ale_lint_on_enter=1
        let g:ale_lint_on_insert_leave=1

        let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
        let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
        let g:ale_c_cppcheck_options = ''
        let g:ale_cpp_cppcheck_options = ''

        augroup FiletypeGroup
            autocmd!
            au BufNewFile,BufRead *.jsx set filetype=javascript.jsx
            au BufNewFile,BufRead *.tsx set filetype=javascript.tsx
        augroup END

        let g:ale_fixers = {
                    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
                    \   'css':['prettier'],
                    \   'go':['gofmt'],
                    \   'graphqls':['eslint'],
                    \   'html':['prettier'],
                    \   'xml':['xmllint'],
                    \   'javascript':['eslint'],
                    \   'javascript.jsx':['eslint'],
                    \   'json':['prettier'],
                    \   'less':['prettier'],
                    \   'python':['autopep8', 'isort', 'yapf'],
                    \   'rust':['rustfmt'],
                    \   'scss':['prettier'],
                    \   'sh':['shfmt'],
                    \   'swift':['swiftformat'],
                    \   'typescript':['eslint'],
                    \   'javascript.tsx':['eslint'],
                    \   'vue':['eslint'],
                    \   'yaml':['prettier']}

        let g:ale_linters = {
                    \   'sql':['sql-lint'],
                    \   'css':['stylelint'],
                    \   'go':['gopls'],
                    \   'graphqls':['prettier'],
                    \   'html':['tidy'],
                    \   'xml':['xmllint'],
                    \   'javascript':['eslint'],
                    \   'javascript.jsx':['stylelint', 'eslint'],
                    \   'json':['jsonlint'],
                    \   'less':['stylelint'],
                    \   'python':['flake8', 'pylint'],
                    \   'rust':['analyzer', 'cargo', 'rustc'],
                    \   'scss':['stylelint'],
                    \   'sh':['shellcheck'],
                    \   'swift':['swiftlint'],
                    \   'typescript':['eslint'],
                    \   'javascript.tsx':['stylelint', 'eslint'],
                    \   'vue':['eslint'],
                    \   'yaml':['yamllint'],
                    \   'vim':['vint']}
    " }

    " Ack {
        " let g:ackprg = 'ag --nocolor --column --nogroup'
        let g:ackprg = 'ag --vimgrep'
    " }

    " Nerdtree syntax highlight {
        let g:WebDevIconsDisableDefaultFolderSymbolColorFromNERDTreeDir = 1
        let g:WebDevIconsDisableDefaultFileSymbolColorFromNERDTreeFile = 1
    " }

    " LeaderF {
        let g:Lf_WindowPosition = 'popup'
        let g:Lf_ShowDevIcons = 0
        "let g:Lf_PreviewInPopup = 1
        "let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': 'DejaVu Sans Mono for Powerline' }
        "let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }
    " }

    " Rust {
        let g:racer_cmd='~/.cargo/bin/racer'
        " let g:racer_experimental_completer = 1
        " let g:racer_insert_paren = 1
    " }

    " Blamer {
        let g:blamer_enabled = 1
    " }

    " YCM {
        let g:ycm_key_invoke_completion = '<C-z>'
        let g:ycm_key_list_select_completion = ['<Down>']
        let g:ycm_key_list_previous_completion = ['<Up>']

        set completeopt=menu,menuone
        let g:ycm_add_preview_to_completeopt = 0
    " }

    " vim-go {
        let g:go_def_mode='gopls'
        let g:go_info_mode='gopls'
    " }
    " rainbow {
        let g:rainbow_active = 0 "1
    " }
    " startify{
        "let g:startify_custom_header = []
        "let g:startify_custom_footer = []
        "let g:startify_custom_header = ''
        "let g:startify_custom_footer = ''

        " startify#fortune#quote()
        " startify#fortune#boxed(...)
        " startify#fortune#cowsay(...)

        " startify#pad([strings])
        " startify#center([strings])

        " startify#pad(split(system('fortune | cowsay -f stegosaurus'), '\n'))

        let g:startify_custom_header = 'startify#pad(startify#fortune#cowsay())'

        let g:startify_session_dir = '~/.vim/session'
        let g:startify_session_autoload = 1

        let g:startify_custom_indices = map(range(1,100), 'string(v:val)')

        let g:startify_lists = [
              \ { 'type': 'bookmarks', 'header': ['   Bookmarks']},
              \ { 'type': 'sessions',  'header': ['   Sessions']},
              \ { 'type': 'commands',  'header': ['   Commands']},
              \ { 'type': 'files',     'header': ['   MRU']},
              \ { 'type': 'dir',       'header': ['   MRU'. getcwd()]},
              \ ]
        let g:startify_skiplist = [
              \ '.*/node_modules',
              \ ]
        let g:startify_files_number = 6

        let g:startify_bookmarks = [
                    \ {'vv':'~/.vimrc'},
                    \ {'vc':'~/.vimrc.conf'},
                    \ {'vm':'~/.vimrc.maps'},
                    \ {'vt':'~/.vimrc.custom'},
                    \ {'vp':'~/.vimrc.plugins'},
                    \ {'vb':'~/.NERDTreeBookmarks'},
                    \ {'vi':'~/.vim/config/init.vim'},
                    \]

        let g:startify_commands= [
                    \ {'ud':':PlugUpdate'},
                    \ {'ug':':PlugUpgrade'},
                    \ {'cs':'Telescope colorscheme'},
                    \]
    " }
" Plugin Config End }
