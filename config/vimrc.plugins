" vim: set sw=2 ts=2 sts=2 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker:
scriptencoding utf-8

" Plugins Beginning {
    let g:Plug_dir = '~/.vim/plugged/'

    filetype off

    call plug#begin(g:Plug_dir)

    " Plug 'gcmt/taboo.vim'
    Plug 'mbbill/undotree'
    Plug 'mattn/emmet-vim'
    Plug 'jreybert/vimagit'
    Plug 'SirVer/ultisnips'
    Plug 'majutsushi/tagbar'            " browse the tags of the current file and get an overview
    Plug 'mhinz/vim-signify'            " show a diff
    Plug 'tpope/vim-fugitive'           " git wrapper
    Plug 'honza/vim-snippets'
    Plug 'mhinz/vim-startify'
    Plug 'roman/golden-ratio'           " automatic resizing
    Plug 'tpope/vim-surround'           " mappings to easily delete, change and add such surroundings in pairs
    Plug 'Yggdroot/indentLine'          " display the indention levels
    Plug 'APZelos/blamer.nvim'
    Plug 'sheerun/vim-polyglot'         " highlight
    Plug 'jiangmiao/auto-pairs'         " insert or delete brackets, parens, quotes in pair
    Plug 'kshenoy/vim-signature'        " display and navigate marks
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'junegunn/vim-easy-align'
    Plug 'easymotion/vim-easymotion'    " motions
    Plug 'terryma/vim-multiple-cursors' " multiple selections
    Plug 'editorconfig/editorconfig-vim'
    " Golang
    Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

    "'~/.config/nvim/plugged/gocode/nvim/symlink.sh'
    Plug 'nsf/gocode', { 'rtp': 'nvim',
          \ 'do': '~/.vim/plugged/gocode/nvim/symlink.sh' }
    " File
    Plug 'preservim/nerdtree'           " explorer
    Plug 'ryanoasis/vim-devicons'
    Plug 'scrooloose/nerdcommenter'     " commenter
    Plug 'Xuyuanp/nerdtree-git-plugin'  " show git status flags
    Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

    " Search
    Plug 'mileszs/ack.vim'
    Plug 'junegunn/fzf.vim'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

    Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }

    " Syntax and Fix
    Plug 'dense-analysis/ale'

    " Deoplete
    if has('nvim')
      Plug 'Shougo/deoplete.nvim' ,{ 'do': ':UpdateRemotePlugins'}
    else
      Plug 'Shougo/deoplete.nvim'
      Plug 'roxma/nvim-yarp'
      Plug 'roxma/vim-hug-neovim-rpc'
    endif

    Plug 'deoplete-plugins/deoplete-jedi'
    Plug 'deoplete-plugins/deoplete-clang'
    Plug 'deoplete-plugins/deoplete-go', { 'do': 'make'}
    Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
    " Plug 'landaire/deoplete-swift'
    " Plug 'autozimu/LanguageClient-neovim', {
      "\ 'branch': 'next',
      "\ 'do': 'bash install.sh',
      "\ }
    Plug 'racer-rust/vim-racer'
    Plug 'tpope/vim-dadbod'
    Plug 'kristijanhusak/vim-dadbod-completion'

    Plug 'junegunn/vim-emoji'

    Plug 'heavenshell/vim-jsdoc', {
          \ 'for': ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx', 'vue'],
          \ 'do': 'make install' }

    call plug#end()
" }

" Plugin Config Start {
    " Emoji{
        set completefunc=emoji#complete
    " }
    " Signify {
        " this first setting decides in which order try to guess your current vcs
        " UPDATE it to reflect your preferences, it will speed up opening files
        let g:signify_vcs_list = [ 'git' ]
        " nicer colors
        highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119
        highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167
        highlight DiffChange        cterm=bold ctermbg=none ctermfg=227
        highlight SignifySignAdd    cterm=bold ctermbg=237  ctermfg=119
        highlight SignifySignDelete cterm=bold ctermbg=237  ctermfg=167
        highlight SignifySignChange cterm=bold ctermbg=237  ctermfg=227
    " }

    " Easemotion {
        let g:EasyMotion_smartcase = 1
    " }

    " Emmet {
        let g:user_emmet_expandabbr_key='<leader><tab>'
    " }

    " NerdTree {
        let g:NERDTreeWinSize=40
        let g:NERDTreeChDirMode=1
        let g:NERDTreeMouseMode=2
        let g:NERDTreeQuitOnOpen=1
        let g:NERDTreeShowHidden=1
        let g:NERDTreeShowBookmarks=1
        let g:NERDTreeKeepTreeInNewTab=1
        let g:NERDTreeDirArrowExpandable = '+'
        let g:NERDTreeDirArrowCollapsible = '-'

        let g:NERDTreeIgnore=[
                    \ '\.py[cd]$', '\~$', '\.swo$',
                    \ '\.swp$', '^\.git$', '^\.hg$',
                    \ '^\.svn$', '\.bzr$', '^\.DS_Store',
                    \ 'node_modules', '\.meta$', '\.fire$']

        let g:NERDTreeGitStatusIndicatorMapCustom = {
            \ 'Modified'  : '*',
            \ 'Staged'    : '+',
            \ 'Untracked' : '✭',
            \ 'Renamed'   : '➜',
            \ 'Unmerged'  : '═',
            \ 'Deleted'   : 'x',
            \ 'Dirty'     : '✗',
            \ 'Clean'     : '✔︎',
            \ 'Ignored'   : '☒',
            \ 'Unknown'   : '?' }
    " }

    " FZF {
        let g:fzf_action = {
                    \ 'ctrl-e': 'edit',
                    \ 'ctrl-t': 'tab split',
                    \ 'ctrl-x': 'split',
                    \ 'ctrl-v': 'vsplit' }
    " }

    " Ultisnips {
        let g:UltiSnipsExpandTrigger='<tab>'
        let g:UltiSnipsJumpBackwardTrigger='<c-j>'
        let g:UltiSnipsJumpForwardTrigger='<c-k>'
        let g:UltiSnipsEditSplit='vertical'
    " }

    " IndentLine {
        let g:indentLine_concealcursor='inc'
        let g:indentLine_conceallevel=2
    " }

    " Ale {
        let g:ale_fix_on_save=1
        let g:ale_lint_on_enter=1
        let g:ale_lint_on_insert_leave=1

        let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
        let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
        let g:ale_c_cppcheck_options = ''
        let g:ale_cpp_cppcheck_options = ''

        augroup FiletypeGroup
            autocmd!
            au BufNewFile,BufRead *.jsx set filetype=javascript.jsx
            au BufNewFile,BufRead *.tsx set filetype=javascript.tsx
        augroup END

        let g:ale_fixers = {
                    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
                    \   'css':['prettier'],
                    \   'go':['gofmt'],
                    \   'graphqls':['eslint'],
                    \   'html':['tidy'],
                    \   'xml':['xmllint'],
                    \   'javascript':['eslint'],
                    \   'javascript.jsx':['eslint'],
                    \   'json':['prettier'],
                    \   'less':['prettier'],
                    \   'python':['autopep8', 'isort', 'yapf'],
                    \   'rust':['rustfmt'],
                    \   'scss':['prettier'],
                    \   'sh':['shfmt'],
                    \   'swift':['swiftformat'],
                    \   'typescript':['eslint'],
                    \   'javascript.tsx':['eslint'],
                    \   'vue':['eslint'],
                    \   'yaml':['prettier']}

        let g:ale_linters = {
                    \   'sql':['sql-lint'],
                    \   'css':['stylelint'],
                    \   'go':['gofmt'],
                    \   'graphqls':['prettier'],
                    \   'html':['tidy'],
                    \   'xml':['xmllint'],
                    \   'javascript':['eslint'],
                    \   'javascript.jsx':['stylelint', 'eslint'],
                    \   'json':['jsonlint'],
                    \   'less':['stylelint'],
                    \   'python':['flake8', 'pylint'],
                    \   'rust':['analyzer', 'cargo', 'rustc'],
                    \   'scss':['stylelint'],
                    \   'sh':['shellcheck'],
                    \   'swift':['swiftlint'],
                    \   'typescript':['eslint'],
                    \   'javascript.tsx':['stylelint', 'eslint'],
                    \   'vue':['eslint'],
                    \   'yaml':['yamllint'],
                    \   'vim':['vint']}
    " }

    " Deoplete {
        if OSX()
          let g:deoplete#sources#clang#libclang_path='/Applications/Xcode.app/'
                      \.'Contents/Developer/Toolchains/XcodeDefault.xctoolchain/'
                      \.'usr/lib/libclang.dylib'
        endif

        if LINUX()
          let g:deoplete#sources#clang#libclang_path='/usr/lib/llvm-11/lib/libclang.so'
        endif

        " let g:deoplete#sources#clang#clang_header='/opt/homebrew/Cellar/'
                    "\.'llvm/11.1.0_1/lib/clang'
        let g:deoplete#enable_at_startup = 1
        call deoplete#custom#option('num_processes', 4)
    " }

    " Ack {
        " let g:ackprg = 'ag --nocolor --column --nogroup'
        let g:ackprg = 'ag --nocolor --column --group'
    " }

    " Nerdtree syntax highlight {
        let g:WebDevIconsDisableDefaultFolderSymbolColorFromNERDTreeDir = 1
        let g:WebDevIconsDisableDefaultFileSymbolColorFromNERDTreeFile = 1
    " }

    " Multiple cursors {
        func! Multiple_cursors_before()
          if deoplete#is_enabled()
            call deoplete#disable()
            let g:deoplete_is_enable_before_multi_cursors = 1
          else
            let g:deoplete_is_enable_before_multi_cursors = 0
          endif
        endfunc

        func! Multiple_cursors_after()
          if g:deoplete_is_enable_before_multi_cursors
            call deoplete#enable()
          endif
        endfunc
    " }

    " Airline {
        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#formatter = 'short_path'
        " let g:airline_theme='base16'
        let g:airline_theme='fruit_punch'
        let g:airline_mode_map = {
          \ '__'     : '-',
          \ 'c'      : 'CMD',
          \ 'i'      : 'INS',
          \ 'ic'     : 'INS',
          \ 'ix'     : 'INS',
          \ 'n'      : 'NOR',
          \ 'multi'  : 'MUL',
          \ 'ni'     : 'NOR',
          \ 'no'     : 'NOR',
          \ 'R'      : 'REP',
          \ 'Rv'     : 'REP',
          \ 's'      : 'S',
          \ 'S'      : 'S',
          \ ''     : 'S',
          \ 't'      : 'T',
          \ 'v'      : 'VIS',
          \ 'V'      : 'VIS',
          \ ''     : 'VIS',
          \ }
        " powerline symbols {
          if !exists('g:airline_symbols')
            let g:airline_symbols = {}
          endif
          let g:airline_left_sep = ''
          let g:airline_left_alt_sep = ''
          let g:airline_right_sep = ''
          let g:airline_right_alt_sep = ''
          let g:airline_symbols.branch = ''
          let g:airline_symbols.colnr = ' COL:'
          let g:airline_symbols.readonly = ''
          let g:airline_symbols.linenr = ' ROW:'
          let g:airline_symbols.maxlinenr = '☰ '
          let g:airline_symbols.dirty='⚡'
        " }
    " }

    " LeaderF {
        let g:Lf_WindowPosition = 'popup'
        let g:Lf_PreviewInPopup = 1
        let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': 'DejaVu Sans Mono for Powerline' }
        let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }
    " }

    " Rust {
        let g:racer_cmd='~/.cargo/bin/racer'
        " let g:racer_experimental_completer = 1
        " let g:racer_insert_paren = 1
    " }

    " SQL {
        function! PackagerInit() abort
          packadd vim-packager
          call packager#init()
          call packager#add('kristijanhusak/vim-packager', { 'type': 'opt' })
          call packager#add('tpope/vim-dadbod')
          call packager#add('kristijanhusak/vim-dadbod-completion')
          call packager#add('Shougo/deoplete.nvim')
        endfunction

        " Source is automatically added,
        " you just need to include it
        " in the chain complete list
        let g:completion_chain_complete_list = {
              \   'sql': [
                \    {'complete_items': ['vim-dadbod-completion']},
                \   ],
                \ }
        " Make sure `substring` is part of this list.
        " Other items are optional for this completion
        " source
        let g:completion_matching_strategy_list = ['exact', 'substring']
        " Useful if there's a lot of camel case items
        let g:completion_matching_ignore_case = 1
    " }
" }
